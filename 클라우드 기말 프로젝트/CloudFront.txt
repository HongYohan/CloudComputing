**CloudFront**를 활용하여 S3의 정적 웹 호스팅 콘텐츠를 캐싱하고, **Route 53**과 연결하여 성능을 향상시키는 방법을 단계별로 설명하겠습니다.

---

### **1. CloudFront 배포 설정**
#### **1.1 S3 버킷에서 정적 웹 호스팅 활성화**
1. S3 콘솔에서 **syindexbucket** 버킷으로 이동.
2. **Properties** 탭에서 **Static website hosting**을 활성화.
   - Hosting type: **Host a static website** 선택.
   - **Index document**와 **Error document**를 입력 (예: `index.html`, `error.html`).
3. **Bucket Policy**를 추가하여 S3 버킷이 퍼블릭으로 읽기 가능하도록 설정 (CloudFront에서 접근하기 위해 필요).
   ```json
   {
       "Version": "2012-10-17",
       "Statement": [
           {
               "Effect": "Allow",
               "Principal": "*",
               "Action": "s3:GetObject",
               "Resource": "arn:aws:s3:::syindexbucket/*"
           }
       ]
   }
   ```

#### **1.2 CloudFront 배포 생성**
1. AWS 콘솔에서 **CloudFront**로 이동.
2. **Create Distribution** 클릭.
3. **Origin Settings** 설정:
   - **Origin Domain**: S3 버킷의 정적 웹 호스팅 엔드포인트 입력 (예: `syindexbucket.s3-website.<region>.amazonaws.com`).
   - **Restrict Bucket Access**: **No** 선택 (정적 웹 호스팅에 퍼블릭 접근이 허용된 경우).
   - **Viewer Protocol Policy**: **Redirect HTTP to HTTPS** 선택(보안을 위해 HTTPS만 허용).
   - **Allowed HTTP Methods**: **GET, HEAD** 선택(정적 콘텐츠에 적합).

4. **Cache Behavior Settings**:
   - **Default TTL**: 캐싱 기간 설정 (예: 3600초).
   - **Compress Objects Automatically**: 활성화(Gzip 압축을 통해 대역폭 최적화).
   - **Query String Forwarding**: 필요 시 활성화(예: 동적 콘텐츠 처리 시).

5. **Create Distribution** 클릭.

#### **1.3 CloudFront 배포 완료 확인**
- CloudFront 배포 생성 후 상태가 **Deployed**로 변경되면 배포가 완료됩니다.
- 배포된 CloudFront의 **Domain Name**(예: `d123456789.cloudfront.net`)을 확인합니다.

---

<CloudFront 배포 설정>

1. AWS Management Console에 로그인.

2. CloudFront 서비스로 이동.

3. Create Distribution 클릭.

4. Origin 설정
- Origin Domain Name: syindexbucket.s3.amazonaws.com을 선택 (정적 웹 호스팅이 활성화된 S3 버킷).
- Origin Access 
	-> Public Access: S3 버킷이 퍼블릭 액세스 허용 상태인 경우
	-> Origin Access Control (OAC): S3 버킷이 퍼블릭 액세스를 차단한 경우, OAC 생성 후 S3 버킷 정책에 추가.

5. Default Behavior 설정:
- Viewer Protocol Policy: Redirect HTTP to HTTPS 선택.
- Cache and Origin Request Settings
	-> Cache Policy: CachingOptimized 선택.
	-> Origin Request Policy : 기본값 유지.
- Allowed HTTP Methods : GET, HEAD 선택.

6. Distribution Settings:
- Price Class: Use All Edge Locations (Best Performance) 선택 (또는 필요한 지역 선택).
- Alternate Domain Names (CNAMEs): Route 53에서 사용할 사용자 도메인 입력 (예: www.example.com).
- SSL Certificate : 사용자 도메인을 연결할 경우, **AWS Certificate Manager (ACM)**을 통해 SSL 인증서 생성 후 선택.
Create Distribution 클릭.

7. Create Distribution 클릭


### **2. Route 53을 통한 사용자 정의 도메인 연결**
CloudFront와 Route 53을 연결하려면 사용자 정의 도메인 이름을 설정하고 HTTPS 인증서를 적용해야 합니다.

#### **2.1 사용자 정의 도메인 준비**
- Route 53에서 호스팅 영역(Hosted Zone)을 생성하거나 기존 도메인을 사용합니다.

#### **2.2 HTTPS 인증서 생성**
1. AWS Management Console에서 **Certificate Manager (ACM)**로 이동.
2. **Request a Certificate** 클릭.
3. **Public Certificate** 요청:
   - 도메인 이름 입력 (예: `www.yourdomain.com`).
   - DNS Validation 선택 후 진행.
4. DNS Validation을 위한 CNAME 레코드 정보를 Route 53의 호스팅 영역에 추가.
5. 인증 상태가 **Issued**로 변경되면 완료.

#### **2.3 CloudFront에 사용자 정의 도메인 적용**
1. CloudFront 배포 설정에서 **General Settings**로 이동.
2. **Alternate Domain Names (CNAMEs)**에 도메인 입력 (예: `www.yourdomain.com`).
3. **SSL Certificate**:
   - **Custom SSL Certificate** 선택.
   - 이전 단계에서 발급된 인증서 선택.

#### **2.4 Route 53에 레코드 추가**
1. Route 53 콘솔로 이동.
2. 호스팅 영역에서 **Create Record** 클릭.
3. 다음 값을 입력:
   - **Record Name**: 사용자 정의 도메인 (예: `www`).
   - **Record Type**: A (Alias).
   - **Alias Target**: CloudFront 배포의 **Domain Name** 선택.
4. 레코드 생성 완료.

---

### **3. 최적화 및 검토**
#### **3.1 캐싱 전략 최적화**
- CloudFront에서 자주 변경되지 않는 정적 콘텐츠는 더 긴 TTL 설정(예: 이미지, CSS).
- 변경 가능성이 높은 콘텐츠는 **Cache-Control** 헤더를 활용하여 TTL을 짧게 설정.

#### **3.2 로그 활성화**
- CloudFront 배포 설정에서 **Standard Logging**을 활성화하여 액세스 로그를 S3 버킷에 저장.

#### **3.3 CloudFront 상태 점검**
- 배포가 완료되면 사용자 정의 도메인(예: `www.yourdomain.com`)을 통해 S3 콘텐츠가 제대로 표시되는지 확인합니다.

---

### 결과
이 설정을 완료하면 S3의 정적 웹 호스팅 콘텐츠가 CloudFront를 통해 전송되며, 사용자 정의 도메인을 통해 Route 53에서 관리됩니다. 이로써 성능이 향상되고 글로벌 사용자에 대한 콘텐츠 배포가 최적화됩니다.