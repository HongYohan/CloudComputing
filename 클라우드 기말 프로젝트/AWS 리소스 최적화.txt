AWS 리소스를 최적화하려면 **Lambda**, **S3**, **API Gateway**의 설정을 검토하고 성능과 비용 효율성을 고려해 조정해야 합니다. 아래는 각 리소스별 권한 및 설정 최적화, 요청 처리량 개선 방법을 정리한 가이드입니다.

---

## **1. Lambda**
### **1.1 권한 설정 검토**
- **최소 권한 부여(Least Privilege)**: Lambda 함수에 필요한 권한만 부여하도록 IAM 정책을 최소화합니다.
  - 예: 특정 S3 버킷만 접근하도록 제한.
    ```json
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::your-bucket-name/*"
        }
      ]
    }
    ```
- **AWS Managed Policies**를 사용하되 필요하다면 Custom Policy 작성.
- **Lambda Execution Role**에 불필요한 서비스 접근 권한이 포함되어 있지 않은지 확인.

### **1.2 성능 최적화**
- **메모리 및 CPU 할당 조정**:
  - 더 많은 메모리를 할당하면 CPU도 함께 증가합니다.
  - 적절한 메모리 크기를 찾으려면 다양한 메모리 크기에서 함수를 실행해보고 비용과 성능을 비교합니다.
  - 예: AWS Lambda Power Tuning 도구 활용.

- **러닝 타임 단축**:
  - 불필요한 초기화 코드 제거.
  - AWS SDK를 최신 버전으로 유지(성능 개선).
  - 외부 API 호출을 병렬 처리하도록 설계.

- **함수 패키지 최적화**:
  - 필요한 라이브러리만 포함하여 배포 패키지 크기를 최소화.
  - Node.js나 Python의 경우, `lambda-layer`를 사용하여 공통 라이브러리 분리.

- **프로비저닝된 동시성(Provisioned Concurrency)**:
  - 예상되는 트래픽 피크 시간에 대비해 미리 컨테이너를 생성하도록 설정.
    ```bash
    aws lambda put-provisioned-concurrency-config \
      --function-name my-function \
      --provisioned-concurrent-executions 10
    ```

---

## **2. S3**
### **2.1 권한 설정 검토**
- **버킷 정책 최소화**:
  - 특정 IP, VPC, 또는 Lambda만 접근할 수 있도록 제한.
  - 예: VPC에서만 접근 가능한 정책.
    ```json
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": "*",
          "Action": "s3:GetObject",
          "Resource": "arn:aws:s3:::your-bucket-name/*",
          "Condition": {
            "IpAddress": {
              "aws:SourceIp": "192.168.1.0/24"
            }
          }
        }
      ]
    }
    ```

- **Public Access Block** 활성화:
  - S3 버킷이 퍼블릭으로 노출되지 않도록 설정.

### **2.2 성능 최적화**
- **S3 Transfer Acceleration**:
  - 데이터를 빠르게 업로드/다운로드하려면 Transfer Acceleration 활성화.

- **캐시 활용**:
  - S3 객체를 CloudFront와 연동하여 캐싱을 활성화.

- **스토리지 클래스 최적화**:
  - 접근 빈도에 따라 스토리지 클래스를 조정.
    - 예: 자주 접근하지 않는 데이터는 **S3 Glacier** 또는 **S3 Intelligent-Tiering** 사용.

---

## **3. API Gateway**
### **3.1 권한 설정 검토**
- **IAM 인증 및 정책 사용**:
  - API Gateway의 호출자 인증을 설정하고, 호출 권한을 IAM Role로 제한.
    ```json
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": "execute-api:Invoke",
          "Resource": "arn:aws:execute-api:region:account-id:api-id/stage-name/HTTP-VERB/resource-path"
        }
      ]
    }
    ```

- **리소스별 CORS 정책 설정**:
  - API Gateway에서 올바른 CORS 설정으로 불필요한 OPTIONS 요청을 줄임.

### **3.2 성능 최적화**
- **통합 요청 유형 최적화**:
  - Lambda Proxy 통합을 사용하여 요청과 응답의 처리 단계를 단순화.

- **스테이지 캐싱 활성화**:
  - 자주 요청되는 데이터를 캐싱하여 응답 시간을 줄이고 Lambda 호출 횟수를 줄임.
    - 스테이지 설정에서 캐싱 활성화.

- **요청 제한 설정**:
  - API Gateway의 **Usage Plans**를 설정하여 요청 제한(Throttle Rate)을 적용.
    ```bash
    aws apigateway update-usage-plan \
      --usage-plan-id usage-plan-id \
      --patch-operations op=replace,path=/throttle/rateLimit,value=100
    ```

- **gzip 압축 활성화**:
  - 클라이언트와의 데이터 전송 속도를 높이기 위해 압축 활성화.

---

## **4. Lambda와 API Gateway의 요청 처리량 최적화**
### **4.1 동시성 관리**
- Lambda:
  - 동시 실행 제한 설정(Concurrency Limits)으로 요청을 관리.
- API Gateway:
  - API Gateway의 스로틀링(Throttling) 설정을 통해 요청 수를 제한.

### **4.2 지연 시간 감소**
- API Gateway와 Lambda가 같은 리전에 있는지 확인.
- Lambda 호출 간에 재사용 가능한 연결을 유지.

---

이 모든 최적화 작업은 주기적으로 트래픽과 비용을 모니터링하여 조정해야 합니다. **CloudWatch**를 활용해 Lambda와 API Gateway의 성능 지표를 분석하면 최적화 방향을 더 명확히 설정할 수 있습니다.